/*
You work for a real estate company that manages properties for multiple landlords. You have been given two DataFrames, one containing information about the properties managed by your company, and the other containing information about the landlords who own those properties. Write a function that summarizes the information about the properties managed by your company, and the total rental income generated by each landlord.

DataFrame 1: properties_df
This DataFrame contains information about the properties managed by your company.
+---------------+-----------+------------------------------------------+
| Column Name   | Data Type | Description                              |
+---------------+-----------+------------------------------------------+
| property_id   | integer   | ID of the property                       |
| landlord_id   | integer   | ID of the landlord who owns the property |
| property_type | string    | Type of property                         |
| rent          | float     | Monthly rent for the property            |
| square_feet   | integer   | Total square feet of the property        |
| city          | string    | City in which the property is located    |
+---------------+-----------+------------------------------------------+

DataFrame 2: landlords_df
This DataFrame contains information about the landlords who own the properties managed by your company.
+-------------+-----------+-------------------------------+
| Column Name | Data Type | Description                   |
+-------------+-----------+-------------------------------+
| landlord_id | integer   | ID of the landlord            |
| first_name  | string    | First name of the landlord    |
| last_name   | string    | Last name of the landlord     |
| email       | string    | Email address of the landlord |
| phone       | string    | Phone number of the landlord  |
+-------------+-----------+-------------------------------+

Output DataFrame (Drag panel to right for full view)
Should summarize the information about the properties managed by your company, and the total rental income generated by each landlord.
+---------------------+-----------+------------------------------------------------------------+
| Column Name         | Data Type | Description                                                |
+---------------------+-----------+------------------------------------------------------------+
| landlord_id         | integer   | ID of the landlord                                         |
| landlord_name       | string    | Full name of the landlord                                  |
| total_rental_income | float     | Total rental income generated by the landlord's properties |
+---------------------+-----------+------------------------------------------------------------+
 
You transform the Properties DataFrame into a summary that has landlord_id as the row, property_type as the column, and the sum of the rent as the value. This DataFrame should then be joined with the Landlords DataFrame to get the full name of each landlord, and the rental income for each landlord should be calculated by summing the rental income for each property.
 
Please note that the DataFrames provided to your function may contain duplicates.
 
 
 
Example
 
properties_df
+-------------+-------------+---------------+------+-------------+----------+
| property_id | landlord_id | property_type | rent | square_feet | city     |
+-------------+-------------+---------------+------+-------------+----------+
| 1           | 101         | Apartment     | 1500 | 1000        | Seattle  |
| 2           | 101         | Condo         | 1200 | 800         | Seattle  |
| 3           | 102         | House         | 2000 | 1500        | Bellevue |
| 4           | 103         | Apartment     | 1800 | 1200        | Redmond  |
| 5           | 103         | Condo         | 1000 | 700         | Redmond  |
+-------------+-------------+---------------+------+-------------+----------+

landlords_df
+-------------+------------+-----------+---------------------------+--------------+
| landlord_id | first_name | last_name | email                     | phone        |
+-------------+------------+-----------+---------------------------+--------------+
| 101         | John       | Smith     | john.smith@example.com    | 555-123-4567 |
| 102         | Jane       | Doe       | jane.doe@example.com      | 555-234-5678 |
| 103         | Bob        | Johnson   | bob.johnson@example.com   | 555-345-6789 |
| 104         | Mary       | Williams  | mary.williams@example.com | 555-456-7890 |
| 105         | Jack       | Brown     | jack.brown@example.com    | 555-567-8901 |
+-------------+------------+-----------+---------------------------+--------------+

Expected
+-------------+---------------+---------------------+
| landlord_id | landlord_name | total_rental_income |
+-------------+---------------+---------------------+
| 101         | John Smith    | 2700.0              |
| 102         | Jane Doe      | 2000.0              |
| 103         | Bob Johnson   | 2800.0              |
+-------------+---------------+---------------------+ */

import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.functions._
import org.apache.spark.sql.expressions.Window
import org.apache.spark
import java.time._

val spark = SparkSession.builder().appName("run-spark-code").getOrCreate()

import spark.implicits._

def etl(properties_df: DataFrame, landlords_df: DataFrame): DataFrame = {
	val joined_df= properties_df.
    groupBy("landlord_id").
    pivot("property_type").
    agg(sum("rent"))
    //joined_df.show(10,false)
    val result_df = joined_df.join(landlords_df,"landlord_id").select(
        $"landlord_id",
        concat_ws(" ",$"first_name",$"last_name").as("landlord_name"),
        (coalesce($"apartment",lit(0)) + coalesce($"condo",lit(0)) 
        + coalesce($"house",lit(0)).cast("float")).alias("total_rental_income")
    )
    val sortedDF = result_df.sort($"landlord_id")
    sortedDF
    
}
